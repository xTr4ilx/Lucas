import org.bukkit.Bukkit;
import org.bukkit.event.Listener;
import org.bukkit.plugin.java.JavaPlugin;

import Utils.Event;
import Utils.TablistTeam;


public class TablistSystem extends JavaPlugin implements Listener {
	
	public static String Prefix = "§3§lTablist §7» ";
	public static TablistSystem plugin;
	
	
	public void onEnable() {
		
		TablistTeam teams = new TablistTeam();
		 
		teams.create("owner", 10, "§4Owner §7|§4 ", null, "tab.owner");
        teams.create("admin", 14, "§cAdmin §7|§c ", null, "tab.admin");
        teams.create("team", 17, "§2Team §7|§2 ", null, "tab.team");
        teams.create("sup", 19, "§eSup §7|§e ", null, "tab.supporter");
        teams.create("freund", 24, "§6", null, "tab.freund");
        teams.create("yt", 26, "§5", null, "tab.youtuber");
        teams.create("premplus", 28, "§6", null, "tab.premiumplus");
        teams.create("prem", 34, "§6", null, "tab.premium");
        teams.create("spieler", 60, "§7",null , null);
 
        teams.update();
     
        plugin = this;
        
        Bukkit.getPluginManager().registerEvents(new Event(), this);
		Bukkit.getConsoleSender().sendMessage(TablistSystem.Prefix + "§7von §e§lxTr4ilx §a§laktiviert");
	}
	
	public void onDisable() {
		
		Bukkit.getConsoleSender().sendMessage(TablistSystem.Prefix + "§7von §e§lxTr4ilx §c§ldeaktiviert!");
		
	}
	
	
	
	

}


import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerInventoryEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerKickEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import Main.TablistSystem;
import ru.tehkode.permissions.bukkit.PermissionsEx;

public class Event implements Listener{
	
	
	
	@EventHandler
	public void onJoin(PlayerJoinEvent e) {
		Player p = e.getPlayer();
		
		new TablistTeam().addPlayer(e.getPlayer());
		
		
	}
	
	@EventHandler
	public void onQuit(PlayerQuitEvent e) {
		Player p = e.getPlayer();

			new TablistTeam().removePlayer(e.getPlayer());
	}

}



import java.util.HashMap;

import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.scoreboard.Scoreboard;
import org.bukkit.scoreboard.Team;


public class TablistTeam {
	
	public static HashMap<String, String> teams;
	 
    static {
        teams = new HashMap<>();
    }
 
    public void create(String name, int rank, String prefix, String suffix, String permission) {
        String fullName = rank + "_" + name;
        Scoreboard board = Bukkit.getScoreboardManager().getMainScoreboard();
        Team t = board.getTeam(fullName);
 
        if (t != null) {
            t.unregister();
        }
 
        t = board.registerNewTeam(fullName);
 
        if (prefix != null) {
            t.setPrefix(prefix);
        }
 
        if (suffix != null) {
            t.setSuffix(suffix);
        }
 
        teams.put(permission, fullName);
 
    }
 
    @SuppressWarnings("deprecation")
    public void addPlayer(Player p) {
        Team t = null;
 
        for (String perm : teams.keySet()) {
            if (perm == null || p.hasPermission(perm)) {
                String currentTeamName = teams.get(perm);
 
                if (t == null || this.getRank(currentTeamName) < this.getRank(t.getName())) {
                    t = Bukkit.getScoreboardManager().getMainScoreboard().getTeam(currentTeamName);
                }
 
            }
        }
 
        if (t != null) {
            t.addPlayer(p);
        }
    }
 
    public void update() {
        for (Player players : Bukkit.getOnlinePlayers()) {
            this.removePlayer(players);
            this.addPlayer(players);
        }
    }
 
    @SuppressWarnings("deprecation")
    public void removePlayer(Player p) {
        for (String teamName : teams.values()) {
            Team t = Bukkit.getScoreboardManager().getMainScoreboard().getTeam(teamName);
            
            
 
            if (t != null && t.hasPlayer(p)) {
                t.removePlayer(p);
            }
            	
        }
        
    }
    
 
    private int getRank(String teamName) {
        if (!teamName.contains("_")) {
            return -1;
        }
 
        String[] array = teamName.split("_");
        try {
            int i = Integer.parseInt(array[0]);
            return i;
        } catch (NumberFormatException ex) {
            return -1;
        }
 
    }

}



